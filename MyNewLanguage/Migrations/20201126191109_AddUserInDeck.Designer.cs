// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyNewLanguage.Data;

namespace MyNewLanguage.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201126191109_AddUserInDeck")]
    partial class AddUserInDeck
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmountDays")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("Doubt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OptionAnswer")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeWait")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeckName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EasyTimeWait")
                        .HasColumnType("int");

                    b.Property<int>("GoodTimeWait")
                        .HasColumnType("int");

                    b.Property<int>("NewCards")
                        .HasColumnType("int");

                    b.Property<int>("ReviewCards")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(35) CHARACTER SET utf8mb4")
                        .HasMaxLength(35);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MyNewLanguage.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDoneInWeek")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyApril")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyAugust")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyDecember")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyFebruary")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyJanuary")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyJuly")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyJune")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyMarch")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyMay")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyNovember")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyOctober")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasySeptember")
                        .HasColumnType("int");

                    b.Property<int>("TotalEasyWeek")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodApril")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodAugust")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodDecember")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodFebruary")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodJanuary")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodJuly")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodJune")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodMarch")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodMay")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodNovember")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodOctober")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodSeptember")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoodWeek")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardApril")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardAugust")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardDecember")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardFebruary")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardJanuary")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardJuly")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardJune")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardMarch")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardMay")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardNovember")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardOctober")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardSeptember")
                        .HasColumnType("int");

                    b.Property<int>("TotalHardWeek")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongApril")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongAugust")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongDecember")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongFebruary")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongJanuary")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongJuly")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongJune")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongMarch")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongMay")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongNovember")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongOctober")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongSeptember")
                        .HasColumnType("int");

                    b.Property<int>("TotalWrongWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyNewLanguage.Models.Card", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyNewLanguage.Models.Identity.UserRole", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyNewLanguage.Models.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyNewLanguage.Models.Statistic", b =>
                {
                    b.HasOne("MyNewLanguage.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
